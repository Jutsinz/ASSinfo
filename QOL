repeat wait() until game:IsLoaded()

local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local nameOfGame = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)

local OrionLib = loadstring(game:HttpGet(('https://pastebin.com/raw/K67bXt62')))()

local Window = OrionLib:MakeWindow({Name = nameOfGame.Name, HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local Tab = Window:MakeTab({
	Name = "Info",
	Icon = "",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Upgrade Prices"
})

Tab:AddParagraph("Next Class Price", game:GetService("Players").LocalPlayer.PlayerGui.CenterUI.Class.Main.Mid["can_upgrade"].price.price.Text)
Tab:AddParagraph("Next Sword Price", game:GetService("Players").LocalPlayer.PlayerGui.CenterUI.Swords.Main.Mid["can_upgrade"].price.price.Text)
Tab:AddParagraph("Next Aura Price", game:GetService("Players").LocalPlayer.PlayerGui.CenterUI.Auras.Main.Mid["can_upgrade"]["price_souls"].price.Text)
Tab:AddParagraph("Next Aura Rune", game:GetService("Players").LocalPlayer.PlayerGui.CenterUI.Auras.Main.Mid["can_upgrade"]["price_rune"].price.Text)

local Tab1 = Window:MakeTab({
	Name = "QoL",
	Icon = "",
	PremiumOnly = false
})

Tab1:AddToggle({
    Name = "Delete Notifications",
    Default = false,
    Save = true,
    Flag = "Notify",
    Callback = function (Value)
        notify = Value
        if notify then
            spawn(function ()
                while notify and task.wait() do
                    for _,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Notification.Messages:GetChildren()) do 
                        if v.Name == "Error" or v.Name == "Success" then 
                            v:Destroy()
                            end
                        end
                end
                
            end)
        end
    end
})

Tab1:AddToggle({
    Name = "Delete Normal Mythics",
    Default = false,
    Save = true,
    Flag = "Mythic",
    Callback = function (Value)
        Mythical = Value
        if Mythical then
            spawn(function ()
                while Mythical and task.wait(0.5) do
                    for _, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.CenterUI.Pets.Main.Scroll:GetChildren()) do
                        if v.ClassName == 'ImageButton' and v.data.rarity.Value == 'Mythical'  and v.data.shiny.Value == false and v.data.elite.Value == false then                      
                            game:GetService("ReplicatedStorage").Remotes.Server:FireServer({'DeleteHeroes', {v.Name}})
    
                    end
                end
            end            
            end)
        end  
    end
})

Tab1:AddToggle({
    Name = "Auto Collect Group Chest",
    Default = false,
    Save = true,
    Flag = "GroupChest",
    Callback = function (Value)
        group = Value
        if group then
            spawn(function ()
                while group and task.wait() do
                    local args = {
                        [1] = {
                            [1] = "GroupRewards"
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
                end
                
            end)
        end
    end
})

local Tab2 = Window:MakeTab({
	Name = "Exchange",
	Icon = "",
	PremiumOnly = false
})

local potexchange1 = {}
local potexchange2 = {}

Tab2:AddDropdown({
	Name = "Give Pot",
	Default = "1",
	Options = {"lucky", "energy", "souls", "damage"},
	Callback = function(Value)
		potexchange1 = Value
	end    
})

Tab2:AddDropdown({
	Name = "Recieve Pot",
	Default = "1",
	Options = {"lucky", "energy", "souls", "damage"},
	Callback = function(Value)
		potexchange2 = Value
	end    
})


Tab2:AddToggle({
    Name = "Auto Exchange Potions",
    Default = false,
    Save = true,
    Flag = "Exchange1",
    Callback = function (Value)
        Exchange = Value
        if Exchange then
            spawn(function ()
                while Exchange and task.wait() do
                    local args = {
                        [1] = {
                            [1] = "Exchange",
                            [2] = potexchange1,
                            [3] = potexchange2
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
                    
                end
                
            end)
        end
    end
})


OrionLib:Init()

